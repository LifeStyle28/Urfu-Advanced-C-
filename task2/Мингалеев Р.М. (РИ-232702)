#include <iostream>
#include <memory>
#include <stdexcept>
#include <cmath>

enum class FigureType {
    TRIANGLE,
    CIRCLE,
    RECTANGLE,
};

class Figure {
public:
    virtual FigureType Type() const = 0;
    virtual double Perimeter() const = 0;
    virtual double Area() const = 0;
    virtual ~Figure() = default; // Виртуальный деструктор
};

class Rect : public Figure {
public:
    Rect(double width, double height) : width(width), height(height) {}

    FigureType Type() const override {
        return FigureType::RECTANGLE;
    }

    double Perimeter() const override {
        return 2 * (width + height);
    }

    double Area() const override {
        return width * height;
    }

private:
    double width;
    double height;
};

class Triangle : public Figure {
public:
    Triangle(double a, double b, double c) : a(a), b(b), c(c) {
        if (a <= 0 || b <= 0 || c <= 0) {
            throw LessThanZeroParam("Sides must be greater than zero.");
        }
        if (!IsValidTriangle(a, b, c)) {
            throw WrongTriangle("The provided sides do not form a valid triangle.");
        }
    }

    FigureType Type() const override {
        return FigureType::TRIANGLE;
    }

    double Perimeter() const override {
        return a + b + c;
    }

    double Area() const override {
        double s = Perimeter() / 2; // Полупериметр
        return std::sqrt(s * (s - a) * (s - b) * (s - c)); // Формула Герона
    }

private:
    double a, b, c;

    bool IsValidTriangle(double a, double b, double c) const {
        return (a + b > c) && (a + c > b) && (b + c > a);
    }
};

class Circle : public Figure {
public:
    Circle(double radius) : radius(radius) {
        if (radius <= 0) {
            throw LessThanZeroParam("Radius must be greater than zero.");
        }
    }

    FigureType Type() const override {
        return FigureType::CIRCLE;
    }

    double Perimeter() const override {
        return 2 * 3.14 * radius; // Используем число Пи, равное 3.14
    }

    double Area() const override {
        return 3.14 * radius * radius; // Площадь круга
    }

private:
    double radius;
};

std::unique_ptr<Figure> make_figure(FigureType type, double a, double b = 0, double c = 0) {
    switch (type) {
        case FigureType::TRIANGLE:
            return std::make_unique<Triangle>(a, b, c);
        case FigureType::CIRCLE:
            return std::make_unique<Circle>(a);
        case FigureType::RECTANGLE:
            return std::make_unique<Rect>(a, b);
        default:
            throw std::invalid_argument("Invalid figure type");
    }
}

// Исключения
class WrongTriangle : public std::invalid_argument {
public:
    explicit WrongTriangle(const std::string& message) : std::invalid_argument(message) {}
};

class LessThanZeroParam : public std::invalid_argument {
public:
    explicit LessThanZeroParam(const std::string& message) : std::invalid_argument(message) {}
};

// Пример использования
int main() {
    try {
        auto triangle = make_figure(FigureType::TRIANGLE, 3, 4, 5);
        std::cout << "Triangle Area: " << triangle->Area() << std::endl;
        std::cout << "Triangle Perimeter: " << triangle->Perimeter() << std::endl;

        auto circle = make_figure(FigureType::CIRCLE, 5);
        std::cout << "Circle Area: " << circle->Area() << std::endl;
        std::cout << "Circle Perimeter: " << circle->Perimeter() << std::endl;

        auto rectangle = make_figure(FigureType::RECTANGLE, 4, 5);
        std::cout << "Rectangle Area: " << rectangle->Area() << std::endl;
        std::cout << "Rectangle Perimeter: " << rectangle->Perimeter() << std::endl;
        
        // Пример исключения
        auto invalidTriangle = make_figure(FigureType::TRIANGLE, 1, 2, 3); // Не существует
    } catch (const std::invalid_argument& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
