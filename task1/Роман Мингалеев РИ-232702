#include <iostream>
#include <vector>
#include <stdexcept>

class Matrix {
public:
    // Конструктор по умолчанию
    Matrix() = default;

    // Конструктор с параметрами
    Matrix(int numRows, int numCols) {
        Reset(numRows, numCols);
    }

    // Метод Reset
    void Reset(int numRows, int numCols) {
        if (numRows <= 0 || numCols <= 0) {
            // Если передано 0 или отрицательное значение, обнуляем размеры
            num_rows = 0;
            num_cols = 0;
            data.clear();
        } else {
            num_rows = numRows;
            num_cols = numCols;
            data.assign(num_rows, std::vector<int>(num_cols, 0));
        }
    }

    // Неконстантный метод At
    int& At(int row, int col) {
        if (row < 0 || row >= num_rows || col < 0 || col >= num_cols) {
            throw std::out_of_range("Index out of range");
        }
        return data[row][col];
    }

    // Константный метод At
    const int& At(int row, int col) const {
        if (row < 0 || row >= num_rows || col < 0 || col >= num_cols) {
            throw std::out_of_range("Index out of range");
        }
        return data[row][col];
    }

    // Константные методы GetRows и GetCols
    int GetRows() const { return num_rows; }
    int GetCols() const { return num_cols; }

    // Оператор равенства
    bool operator==(const Matrix& m2) {
        if (num_rows != m2.num_rows || num_cols != m2.num_cols) {
            return false;
        }
        for (int i = 0; i < num_rows; ++i) {
            for (int j = 0; j < num_cols; ++j) {
                if (data[i][j] != m2.data[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }

    // Оператор неравенства
    bool operator!=(const Matrix& m2) {
        return !(*this == m2);
    }

    // Оператор сложения
    Matrix operator+(const Matrix& m2) {
        if (num_rows != m2.num_rows || num_cols != m2.num_cols) {
            throw std::invalid_argument("Matrices must have the same dimensions for addition");
        }
        Matrix result(num_rows, num_cols);
        for (int i = 0; i < num_rows; ++i) {
            for (int j = 0; j < num_cols; ++j) {
                result.At(i, j) = At(i, j) + m2.At(i, j);
            }
        }
        return result;
    }

private:
    int num_rows = 0; // Количество строк
    int num_cols = 0; // Количество столбцов
    std::vector<std::vector<int>> data; // Данные матрицы
};

// Пример использования
int main() {
    Matrix mat1(2, 3);
    Matrix mat2(2, 3);

    mat1.At(0, 0) = 1;
    mat1.At(0, 1) = 2;
    mat1.At(0, 2) = 3;

    mat2.At(0, 0) = 4;
    mat2.At(0, 1) = 5;
    mat2.At(0, 2) = 6;

    Matrix mat3 = mat1 + mat2;

    for (int i = 0; i < mat3.GetRows(); ++i) {
        for (int j = 0; j < mat3.GetCols(); ++j) {
            std::cout << mat3.At(i, j) << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
